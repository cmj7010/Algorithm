# !usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:Charlie

'''
一个数组的两端分别作为两个栈的栈底，每个栈的压栈操作都是向着另一个栈的栈底进行,两个栈顶碰头表示堆栈已满；
'''
from sre_constants import error


class TwoStack(object):
    def __init__(self, capacity):
        if capacity <= 1:
            return
        self._capacity = capacity
        self._array = [0]* capacity
        self._top1 = 0
        self._top2 = self._capacity - 1
        

    def _CheckCapacity(self):
        if self._top1 == self._top2:  #如果满了，就扩大一倍
            re_capacity = self._capacity * 2
            tmp_array = [0]* re_capacity
            for i in range(0, self._top1):
                tmp_array[i] = self._array[i]
            for i in range(self._top2, self._capacity-1):
                tmp_array[i] = self._array[i]
            self._top2 += self._capacity
            self._capacity = re_capacity
            self._array = tmp_array
            

    def l_push(self,x):
        self._CheckCapacity()
        self._array[self._top1] = x
        self._top1 +=1
        

    def l_pop(self):
        if self._top1 >0:
            self._top1 -= 1
            re = self._array[self._top1]
            return re
        else:
            print('空栈\n')
            return error


    def r_push(self,y):
        self._CheckCapacity()
        self._array[self._top2] =y
        self._top2 -=1
        

    def r_pop(self):
        if self._top2 <  self._capacity -1:
            self._top2 += 1
            re = self._array[self._top2]
            return re
        else:
            print('空栈\n')
            return error

if __name__ == '__main__':
    ts = TwoStack( 5)
    print(ts.r_pop())
    print(ts.l_pop())
    ts.l_push(1)
    ts.l_push(2)
    ts.l_push(3)
    ts.l_push(4)

    ts.r_push(1)
    ts.r_push(2)
    ts.r_push(3)
    ts.r_push(4)

    print(ts.r_pop())
    print(ts.l_pop())
    print(ts.l_pop())
